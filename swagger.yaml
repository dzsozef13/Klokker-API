swagger: "2.0"
info:
  version: "1.0.0"
  title: "Klokker API"
basePath: "/"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  bearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    description: "Bearer token authorization"

paths:
  # Auth login endpoint
  /auth/login:
    post:
      tags:
        - "Auth"
      summary: "Logs in a user"
      description: "Logs in a user with the specified email and password."
      operationId: "loginUser"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be logged in"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
              password:
                type: "string"
      responses:
        "200":
          description: "User logged in successfully"
          schema:
            type: "object"
            properties:
              name:
                type: "string"
              token:
                type: "string"
        "400":
          description: "Invalid input or email/password is incorrect"
        "500":
          description: "Server error"

  # User endpoints
  /user:
    post:
      tags:
        - "Users"
      summary: "Creates a new User"
      operationId: "createUser"
      security:
        - api_key: []
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            properties:
              name:
                type: "string"
              email:
                type: "string"
              password:
                type: "string"
              role:
                type: "string"
      responses:
        "201":
          description: "User created successfully"

    get:
      tags:
        - "Users"
      summary: "Gets all Users"
      operationId: "getAllUsers"
      parameters: []
      responses:
        "200":
          description: "List of all Users"
          schema:
            type: "array"
  
  /user/{id}:
    get:
        tags:
          - "Users"
        summary: "Return a User with the ID"
        operationId: "updateQuoteById"
        security:
          - api_key: []
        parameters: []
        responses:
          "200":
            description: "A single Users"
            schema:
              type: "object"

    patch:
      tags:
        - "Users"
      summary: "Updates a User by ID"
      operationId: "updateQuoteById"
      security:
        - api_key: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          required: false
          schema:
            type: "object"
            properties:
              name:
                type: "string"
              role:
                type: "string"
              _teamId:
                type: "string"
              invite:
                type: "string"

    delete:
      tags:
          - "Users"
      summary: "Delete a User by ID"
      parameters:
        - name: id
          in: path
          required: true
          type: string
      security:
        - api_key: []
      responses:
        200:
          description: "Quote deleted successfully"